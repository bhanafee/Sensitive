package com.maybeitssquid.sensitive;

import java.util.Arrays;

/**
 * A {@link Sensitive} value that can be backed by any array of items of the same type.
 *
 * @param <T> the type of the individual segments. This type should have well-defined {@link Object#equals(Object)} and
 *            {@link Object#hashCode()} methods so that the corresponding methods in this class meet the contract.
 */
public class SensitiveArray<T> extends Sensitive<T[]> {

    /**
     * Creates a wrapper for a sensitive array.
     *
     * @param sensitive the array to protect.
     */
    protected SensitiveArray(T[] sensitive) {
        super(sensitive);
    }

    /**
     * Returns the hash of the enclosed {@code raw} data as generated by invoking {@link Arrays#hashCode(Object[])}
     * on the contained raw data.
     *
     * @return {@inheritDoc}
     */
    @Override
    public int hashCode() {
        return Arrays.hashCode(this.sensitive);
    }

    /**
     * Returns true if the types match and the enclosed raw data are equal as indicated by invoking
     * {@link Arrays#equals(Object[], Object[])}.
     *
     * @param o {@inheritDoc}
     * @return {@inheritDoc}
     */
    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        return Arrays.equals(sensitive, ((SensitiveArray<?>) o).sensitive);
    }
}
